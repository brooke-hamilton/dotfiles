#requires -Module Pester -Version 5
Set-StrictMode -Version 3.0

BeforeDiscovery {
    if (Get-Module -Name 'New-WslFromDevContainer') {
        Remove-Module -Name 'New-WslFromDevContainer' -Force
    }
    Import-Module "$PSScriptRoot\New-WslFromDevContainer.psm1" -Force
}

BeforeAll {

    function Get-DevContainerJsonContent {
        
        return @'
{
    "name": "test-container",
    "image": "mcr.microsoft.com/devcontainers/base:ubuntu"
}
'@
    }

    function Get-DevContainerJsonWithExtensions {
        
        return @'
{
    "name": "test-container",
    "image": "mcr.microsoft.com/devcontainers/base:ubuntu",
    "features": {
        "ghcr.io/devcontainers/features/go:1": {}
    },
    "customizations": {
        "vscode": {
            "extensions": [
                "redhat.vscode-yaml",
                "davidanson.vscode-markdownlint"
            ]
        }
    }
}
'@
    }

    function Get-DevContainerJsonWithoutName {
        return @'
{
    "image": "mcr.microsoft.com/devcontainers/base:ubuntu"
}
'@
    }

    function New-DevContainerJsonFile {
        param(
            [string]$workspaceFolder,
            [string]$subfolder = $null,
            [string]$jsonContent
        )
    
        # Create the .devcontainer folder if it does not exist
        $devContainerFolder = Join-Path -Path $workspaceFolder -ChildPath '.devcontainer'
        if (-not (Test-Path $devContainerFolder)) {
            New-Item -ItemType Directory -Path $devContainerFolder -Force | Out-Null
        }
    
        # If the $subfolder parameter is provided and does not exist, create it
        if ($subfolder) {
            $devContainerFolder = Join-Path -Path $devContainerFolder -ChildPath $subfolder
            if (-not (Test-Path $devContainerFolder)) {
                New-Item -ItemType Directory -Path $devContainerFolder -Force | Out-Null
            }
        }
            
        $devContainerJsonPath = Join-Path -Path $devContainerFolder -ChildPath 'devcontainer.json'
        $jsonContent | Set-Content -Path $devContainerJsonPath -Force | Out-Null
    
        return $devContainerJsonPath
    }

    function Remove-WslInstance {
        param(
            [string]
            [Parameter(Mandatory = $true)]
            $wslInstanceName
        )
    
        wsl.exe --unregister $wslInstanceName
    }

    # Deletes all remaining container instances generated by this test.
    function Remove-RemainingContainers {
        $remainingContainers = docker ps -aq --filter ancestor=test-container
        if ($remainingContainers) {
            docker rm $remainingContainers --force
        }
    }

    function Assert-WslInstance {
        param(
            [string]
            [Parameter(Mandatory = $true)]
            $wslInstanceName
        )
    
        wsl.exe --list | Should -Contain $wslInstanceName
    }

    function Assert-UserConfiguration {
        param (
            [string]$userName
        )

        # The user exists as the default user created by the dev container (user 1000).
        wsl.exe --distribution $wslInstanceName --user root --cd "~" -- bash -c 'id -nu 1000' `
        | Should -Contain $userName
            
        # The wsl.conf file sets the user as the default user.
        wsl.exe --distribution $wslInstanceName --user root --cd "~" -- bash -c 'cat /etc/wsl.conf' `
        | Should -Contain "default=$userName"
            
        # The user has sudo abilities.
            (wsl.exe --distribution $wslInstanceName --user root --cd "~" -- bash -c "sudo --list --other-user=$userName")[0] `
        | Should -Match "^Matching Defaults entries for $userName"
    }
        
    # Recreate the test data folder
    $testDataPath = Join-Path -Path $PSScriptRoot -ChildPath 'TestData'
    if ((Test-Path -Path $testDataPath)) {
        Remove-Item -Path $testDataPath -Recurse -Force
    }
    New-Item -ItemType Directory -Path $testDataPath | Out-Null
}


AfterAll {
    # Remove the test data folder
    Remove-Item -Path $testDataPath -Recurse -Force
    Remove-RemainingContainers
}

Describe 'New-WslFromDevContainer' {
    BeforeEach {
        $testDataPath | Should -Exist
    }
    
    AfterEach {
        Get-ChildItem -Path $testDataPath -Recurse -Force | Remove-Item -Recurse -Force
    }    
    
    InModuleScope 'New-WslFromDevContainer' {
        
        It 'Get-WindowsUser returns a username' -Tag 'WindowsUser' {
            # Act
            $username = Get-WindowsUser
                
            # The output is cached in a script level variable.
            $cachedUserName = Get-WindowsUser

            # Assert
            $username | Should -Not -BeNullOrEmpty
            $userName | Should -Eq $cachedUserName
        }
        
        It 'Get-DefaultWslInstancesFolder returns user profile plus wsl' -Tag 'DefaultWslInstancesFolder' {
            # Act
            $wslInstancesFolder = Get-DefaultWslInstancesFolder
            
            # Assert
            $wslInstancesFolder | Should -Not -BeNullOrEmpty
            
            if ($IsWindows) {
                Test-Path -Path $wslInstancesFolder | Should -Be $true
            }
            else {
                # If not on Windows, use the windows pwsh.exe to test the path on windows.
                pwsh.exe -Command "Test-Path -Path $wslInstancesFolder" | Should -Be $true
            }
        }
    }
        
    It 'Throws error if no .devcontainer file' -Tag NoFile {
        # Arrange
        $expectedMessage = "No devcontainer.json files found."

        # Act
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath } | Should -Throw $expectedMessage
    }

    It 'Throws error if multiple .devcontainer files and no json path parameter' -Tag MultipleDevContainerFiles {
        # Arrange
        $expectedMessage = "Multiple devcontainer.json files found. Please provide the DevContainerJsonPath parameter."
        New-DevContainerJsonFile -workspaceFolder $testDataPath -subfolder 'subfolder1' -jsonContent (Get-DevContainerJsonContent) | Should -Exist
        New-DevContainerJsonFile -workspaceFolder $testDataPath -subfolder 'subfolder2' -jsonContent (Get-DevContainerJsonContent) | Should -Exist
        
        # Act
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath } | Should -Throw $expectedMessage
    }

    It 'Throws error if invalid container path given' {
        # Arrange
        $expectedMessage = "No devcontainer.json file found."

        # Act
        { & New-WslFromDevContainer -WorkspaceFolder $testDataPath -DevContainerJsonPath 'invalid-path' } | Should -Throw $expectedMessage
    }

    It 'Throws error when null user name given' {
        # Arrange
        New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonContent)
        $expectedMessage = "Cannot validate argument on parameter 'NewUserName'. The argument is null, empty, or consists of only white-space characters. Provide an argument that contains non white-space characters, and then try the command again."

        # Act
        { & New-WslFromDevContainer -WorkspaceFolder $testDataPath -DevContainerJsonPath 'invalid-path' -NewUserName $null } | Should -Throw $expectedMessage
    }

    It 'Can get dev container name' -Tag 'GetDevContainerName' {
        # Arrange
        $devContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonContent)
        $expectedName = (Get-Content -Path $devContainerJsonPath -Raw | ConvertFrom-Json).name

        # Act
        $actualName = Get-DevContainerName -DevContainerJsonPath $devContainerJsonPath

        # Assert
        $actualName | Should -Be $expectedName
    }

    It 'Can get extensions' -Tag 'GetExtensions' {
        # Arrange
        $devContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonWithExtensions)
        
        # Act
        $actualExtensions = Get-DevContainerExtensions -DevContainerJsonPath $devContainerJsonPath

        # Assert
        $actualExtensions | Should -Contain "davidanson.vscode-markdownlint"
    }

    It 'Can get extensions that do not exist' -Tag 'GetExtensions' {
        # Arrange
        $devContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonContent)

        # Act
        $actualExtensions = Get-DevContainerExtensions -DevContainerJsonPath $devContainerJsonPath

        # Assert
        $actualExtensions | Should -Be $null
    }

    It 'Gets env section from docker inspect' -Tag 'GetEnvSection' {    
        # Arrange
        $DevContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonWithExtensions)
        $containerName = Get-DevContainerName -devContainerJsonPath $DevContainerJsonPath
        $containerLabel = $containerName.ToLower()
        $WorkspaceFolder = $testDataPath
        
        InModuleScope 'New-WslFromDevContainer' -Parameters @{ 
            testDataPath         = $testDataPath;
            containerName        = $containerName;
            containerLabel       = $containerLabel;
            WorkspaceFolder      = $WorkspaceFolder;
            DevContainerJsonPath = $DevContainerJsonPath;
        } {    
            $containerId = Invoke-ContainerBuild `
                -containerName $containerName `
                -containerLabel $containerLabel `
                -workspaceFolder $WorkspaceFolder `
                -devContainerJsonPath $DevContainerJsonPath

            # Act
            $containerEnv = Get-ContainerEnv -containerId $containerId
            
            # Assert
            $containerEnv | Should -Contain "GOPATH=/go"
            docker rm $containerId --force --volumes
        }
    }    

    It 'Creates WSL instance from workspace folder with one devcontainer.json' -Tag CreateWslOneJson {
        # Arrange
        New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonContent)
        $wslInstanceName = 'test-container-wsl'
        
        # Act
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath -WslInstanceName $wslInstanceName } | Should -Not -Throw

        # Assert
        Assert-WslInstance -wslInstanceName $wslInstanceName
        Remove-WslInstance -wslInstanceName $wslInstanceName
    }

    It 'Creates WSL instance from workspace folder with multiple devcontainer.json files' {
        # Arrange
        New-DevContainerJsonFile -workspaceFolder $testDataPath -subfolder 'subfolder1' -jsonContent (Get-DevContainerJsonContent)
        $devContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -subfolder 'subfolder2' -jsonContent (Get-DevContainerJsonContent)
        $wslInstanceName = 'test-container-wsl'
        
        # Act
        { New-WslFromDevContainer `
                -WorkspaceFolder $testDataPath `
                -DevContainerJsonPath $devContainerJsonPath `
                -WslInstanceName $wslInstanceName } | Should -Not -Throw

        # Assert
        Assert-WslInstance -wslInstanceName $wslInstanceName
        Remove-WslInstance -wslInstanceName $wslInstanceName
    }

    It "Can get dev container json" -Tag DevContainerJson {
        # Arrange
        $devContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonContent)

        $devContainerJsonContent = Get-DevContainerJson -DevContainerJsonPath $devContainerJsonPath

        # Assert
        $devContainerJsonContent | Should -Not -BeNullOrEmpty
    }

    It 'Creates WSL instance with default name' -Tag 'DefaultCase' {
        # Arrange
        $devContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonContent)
        $wslInstanceName = (Get-Content -Path $devContainerJsonPath -Raw | ConvertFrom-Json).name
        
        # Act
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath } | Should -Not -Throw

        # Assert
        Assert-WslInstance -wslInstanceName $wslInstanceName
        Remove-WslInstance -wslInstanceName $wslInstanceName
    }

    It 'Creates WSL instance with default name with extensions' -Tag 'DefaultCaseWithExtensions' {
        # Arrange
        $devContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonWithExtensions)
        $wslInstanceName = (Get-Content -Path $devContainerJsonPath -Raw | ConvertFrom-Json).name
        
        # Act
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath } | Should -Not -Throw

        # Assert
        Assert-WslInstance -wslInstanceName $wslInstanceName
        Remove-WslInstance -wslInstanceName $wslInstanceName
    }

    It 'Uses workspace folder name when devcontainer.json has no name property' -Tag 'NoName' {
        # Arrange
        New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonWithoutName) | Out-Null
        $expectedWslName = (Split-Path -Leaf $testDataPath)
        
        # Act
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath } | Should -Not -Throw

        # Assert
        Assert-WslInstance -wslInstanceName $expectedWslName
        Remove-WslInstance -wslInstanceName $expectedWslName
    }

    It 'Skips user name update' -Tag 'SkipUserNameChange' {
        # Arrange
        $devContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonContent)
        $wslInstanceName = (Get-Content -Path $devContainerJsonPath -Raw | ConvertFrom-Json).name
        
        # Act
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath -SkipUserNameChange } | Should -Not -Throw

        # Assert
        Assert-WslInstance -wslInstanceName $wslInstanceName
        Assert-UserConfiguration -userName 'vscode'
        Remove-WslInstance -wslInstanceName $wslInstanceName
    }

    It 'Can set user name' -Tag 'SetUserName' {
        # Arrange
        $devContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonContent)
        $wslInstanceName = (Get-Content -Path $devContainerJsonPath -Raw | ConvertFrom-Json).name
        
        # Act
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath -NewUserName 'walter' } | Should -Not -Throw

        # Assert
        Assert-WslInstance -wslInstanceName $wslInstanceName
        Assert-UserConfiguration -userName 'walter'
        Remove-WslInstance -wslInstanceName $wslInstanceName
    }

    It 'Throws error with two instances of the same name' -Tag 'TwoInstances' {
        # Arrange
        $devContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonContent)
        $wslInstanceName = (Get-Content -Path $devContainerJsonPath -Raw | ConvertFrom-Json).name
        $expectedMessage = "A WSL instance with the name $wslInstanceName already exists."
        
        # Act
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath } | Should -Not -Throw
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath } | Should -Throw `
        | ForEach-Object { $_.Exception.Message | Should -Contain $expectedMessage }

        Assert-WslInstance -wslInstanceName $wslInstanceName
        Remove-WslInstance -wslInstanceName $wslInstanceName
    }

    It 'Does not throw error with two instances of the same name and Force parameter' -Tag 'TwoInstancesNoError' {
        # Arrange
        $devContainerJsonPath = New-DevContainerJsonFile -workspaceFolder $testDataPath -jsonContent (Get-DevContainerJsonContent)
        $wslInstanceName = (Get-Content -Path $devContainerJsonPath -Raw | ConvertFrom-Json).name
        
        # Act
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath } | Should -Not -Throw
        { New-WslFromDevContainer -WorkspaceFolder $testDataPath -Force } | Should -Not -Throw

        Assert-WslInstance -wslInstanceName $wslInstanceName
        Remove-WslInstance -wslInstanceName $wslInstanceName
    }
}
